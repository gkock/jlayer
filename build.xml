<project name="jlayer" default="test.suiteC" basedir=".">
	
	<!-- property definitions -->
	
	<property name="src.dir" value="src"/>
	
	<property name="src.classes.dir" value="${src.dir}/classes"/> <!-- SOURCE CLASSES -->
	
	<property name="src.units.dir" value="${src.dir}/units"/>     <!-- UNIT CLASSES -->
	<property name="src.layers.dir" value="${src.dir}/layers"/>   <!-- GENERATED CLASSES -->
	 
	<property name="src.tests.dir" value="${src.dir}/tests"/> 		<!-- TEST CLASSES -->
	<property name="src.suiteA.dir" value="${src.tests.dir}/suiteA"/>   <!-- TESTING BASICS -->
	<property name="src.suiteB.dir" value="${src.tests.dir}/suiteB"/>   <!-- TESTING LAYER GENERATION -->
	<property name="src.suiteC.dir" value="${src.tests.dir}/suiteC"/>   <!-- TESTING GENERATED LAYERS -->
	
	<property name="lib.dir" value="lib"/>
	<property name="lib.classes.dir" value="${lib.dir}/classes"/>
	<property name="lib.tests.dir" value="${lib.dir}/tests"/>
	
	<property name="meta.dir" value="META-INF"/>
	<property name="build.dir" value="build"/>
	
	<property name="reports.dir" value="reports"/>
	<property name="reports.choice.dir" value="${reports.dir}/choice"/>
	<property name="reports.suiteA.dir" value="${reports.dir}/suiteA"/>
	<property name="reports.suiteB.dir" value="${reports.dir}/suiteB"/>
	<property name="reports.suiteC.dir" value="${reports.dir}/suiteC"/>
	
	<property name="doc.dir" value="doc"/>
	<property name="javadoc.dir" value="javadoc"/>
	<property name="javadoc.classes.dir" value="${javadoc.dir}/classes"/>
	<property name="javadoc.web.dir" value="E:\Dropbox\MLP\Website\www\javadoc"/>
	<property name="javadoc.tests.dir" value="${javadoc.dir}/tests"/>
	<property name="deploy.dir" value="deploy"/>
	
	<property name="jar.name" value="jlayer-1.0"/>
	<property name="atrium.jar.dir" value="C:\Users\gko\Downloads"/>
	<available file="${atrium.jar.dir}" property="atrium.present"/>
	<property name="private.jar.dir" value="C:\Users\Dr. Gerd Kock\Downloads"/>
	<available file="${private.jar.dir}" property="private.present"/>
	
	<property name="program.main" value="org.jlayer.processor.UnitVisitorTest"/>
	<property name="debug" value="on"/>
	
	<!-- path definitions -->

	<path id="classpath">
		<pathelement location="${build.dir}"/>
		<fileset dir="${lib.classes.dir}">
    		<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="classpath.tests">
		<path refid="classpath"/>
		<fileset dir="${lib.tests.dir}">  
    		<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="testdirs">
		<dirset dir="${src.dir}">  
    		<include name="units"/>
			<include name="tests/suiteA"/>
			<include name="tests/suiteB"/>
			<include name="tests/suiteC"/>
		</dirset>
	</path>
	
	<!-- target: clean.layers -->
	<target name="clean.layers">
	        <delete includeemptydirs="true" quiet="true">
	        	<fileset dir="${src.layers.dir}" excludes="readme.txt" includes="**/*"/>
	        </delete>
	</target>
	
	<!-- target: clean -->
    <target name="clean" depends="clean.layers">
    	<delete dir="${build.dir}" quiet="true"/>
    	<delete dir="${reports.dir}" quiet="true"/>
    	<delete dir="${javadoc.classes.dir}" quiet="true"/>
    	<delete dir="${javadoc.tests.dir}" quiet="true"/>
    	<delete dir="${deploy.dir}" quiet="true"/>
    	<delete quiet="true">
    		<fileset dir="." includes="**/*~" defaultexcludes="false"/>
    	</delete>
    </target>
	
	<!-- target: init -->
    <target name="init">
    	<mkdir dir="${build.dir}"/>
    	<mkdir dir="${reports.dir}"/>
    	<mkdir dir="${javadoc.classes.dir}"/>
    	<mkdir dir="${javadoc.tests.dir}"/>
    	<mkdir dir="${deploy.dir}"/>
    </target>
	
	<!-- target: compile.classes -->
    <target name="compile.classes" depends="init">
        <javac debug="${debug}"
    		source="17"
    		classpathref="classpath"
    		srcdir="${src.classes.dir}"
        	excludes="**/init/*,**/process/*"
         	destdir="${build.dir}"
        	includeantruntime="false">
        	<!-- <compilerarg value="deprecation" /> -->
		</javac>
    </target>
	
	<!-- target: compile.units -->
		<target name="compile.units" depends="init,compile.classes">
			<javac debug="${debug}"
			    source="17"
			    classpathref="classpath"
			    srcdir="${src.units.dir}"
			    destdir="${build.dir}"
			    includeantruntime="false">
				<compilerarg line="-s src/layers -processor org.jlayer.impl.Processor"/>
			</javac>
		</target>
	
	<!-- target: compile.suiteA -->
	<target name="compile.suiteA" depends="init,compile.classes">
		<javac debug="${debug}"
		    source="17"
		    classpathref="classpath.tests"
		    srcdir="${src.suiteA.dir}"
		    destdir="${build.dir}"
		    includeantruntime="false"
		/>
	</target>
	
	<!-- target: compile.suiteB -->
	<target name="compile.suiteB" depends="init,compile.suiteA">
		<javac debug="${debug}"
		    source="17"
		    classpathref="classpath.tests"
		    srcdir="${src.suiteB.dir}"
		    destdir="${build.dir}"
		    includeantruntime="false"
		/>
	</target>
	
	<!-- target: compile.suiteC -->
	<target name="compile.suiteC" depends="init,compile.suiteB">
		<javac debug="${debug}"
		    source="17"
		    classpathref="classpath.tests"
			srcdir="${src.suiteC.dir}"
			destdir="${build.dir}"
		    includeantruntime="false"
		/>
	</target>
	
	<!-- target: test.choice -->
	<target name="test.choice" depends="compile.classes, compile.suiteC">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.choice.dir}" 
	    	    groups="config,choice" excludedgroups = "ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: test.suiteA -->	<!-- TESTING BASICS -->
	<target name="test.suiteA" depends="clean.layers, compile.suiteA">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.suiteA.dir}" 
	    	    groups="suiteA" excludedgroups ="ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: test.suiteB -->	<!-- TESTING LAYER GENERATION -->
	<target name="test.suiteB" depends="test.suiteA, compile.suiteB">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.suiteB.dir}" 
	    	    groups="config, suiteB" excludedgroups ="ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: test.suiteC -->	<!-- TESTING GENERATED LAYERS -->
	<target name="test.suiteC" depends="test.suiteB, compile.suiteC">
	<!-- target name="test.suiteC" depends="compile.units, compile.suiteC"-->
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.suiteC.dir}" 
	    	    groups="suiteC" excludedgroups ="ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: run -->
    <target name="run" depends="compile.classes">
        <java classname="${program.main}" classpathref="classpath" fork="yes">
        	<arg value="-v"/>
        </java>
    </target>
	
	<!-- target: javadoc.classes -->
    <target name="javadoc.classes" depends="init">
    	<delete dir="${javadoc.classes.dir}" quiet="true"/>
    	<mkdir dir="${javadoc.classes.dir}"/>
    	<javadoc packagenames="org.jlayer.*"
    			additionalparam="-Xdoclint:none -quiet"
    			sourcepath="${src.classes.dir}"
    			defaultexcludes="yes"
    			destdir="${javadoc.classes.dir}"
    			version="true"
    			use="true"
    			useexternalfile="true"
    			access="private"
    			overview="${src.classes.dir}/overview.html"
    		    windowtitle="JLayer - Development System"
    			doctitle="JLayer - Development System">
    		<link href="https://docs.oracle.com/en/java/javase/17/docs/api"/>
    	</javadoc>
    </target>
	
	<!-- target: javadoc.web -->
	    <target name="javadoc.web" depends="init">
	    	<delete dir="${javadoc.web.dir}" quiet="true"/>
	    	<mkdir dir="${javadoc.web.dir}"/>
	    	<javadoc packagenames="org.jlayer.*"
	    			additionalparam="-Xdoclint:none -quiet"
	    			sourcepath="${src.classes.dir}"
	    			defaultexcludes="yes"
	    			destdir="${javadoc.web.dir}"
	    			version="true"
	    			use="true"
	    			useexternalfile="true"
	    			access="private"
	    			overview="${src.classes.dir}/overview.html"
	    		    windowtitle="JLayer - Development System"
	    			doctitle="JLayer - Development System">
	    		<link href="https://docs.oracle.com/en/java/javase/17/docs/api"/>
	    	</javadoc>
	    </target>
	
	<!-- MEMO additionalparam="-Xdoclint:none -quiet" -->
	<!-- ... suppresses        -warnings      -output -->
	
	<!-- target: javadoc.tests -->
    <target name="javadoc.tests" depends="init">
    	<delete dir="${javadoc.tests.dir}" quiet="true"/>
    	<mkdir dir="${javadoc.tests.dir}"/>
    	<javadoc packagenames="org.jlayer.*, default, basic.units, faulty.units, more.tests, sandbox"
    			additionalparam="-Xdoclint:none -quiet"
    			sourcepathref="testdirs"
    			classpathref="classpath.tests"
    			defaultexcludes="yes"
    			destdir="${javadoc.tests.dir}"
    			version="true"
    			use="true"
    			useexternalfile="true"
    			access="private"
    			overview="${src.tests.dir}/overview.html"
    		    windowtitle="JLayer - Building and Testing"
    			doctitle="JLayer - Building and Testing">
    		<link href="https://docs.oracle.com/en/java/javase/17/docs/api"/>
    	</javadoc>
    </target>
	
	<!-- target: deploy -->
    <target name="deploy" depends="init, javadoc.classes">
        <jar destfile="${deploy.dir}/${ant.project.name}.jar">
        	<zipfileset dir="${src.dir}" prefix="${src.dir}"/>
        	<zipfileset dir="${lib.dir}" prefix="${lib.dir}"/>
        	<zipfileset dir="${doc.dir}" prefix="${doc.dir}"/>
        	<zipfileset dir="${javadoc.classes.dir}" prefix="${javadoc.classes.dir}"/>
        	<fileset file="build.xml"/>
        </jar>
    </target>
	
	<!-- target: export.jar.atrium -->
    <target name="export.jar.atrium" if="atrium.present" depends="compile.classes">
        <jar destfile="${atrium.jar.dir}/${jar.name}.jar">
        	<zipfileset dir="${build.dir}/org" prefix="org/" excludes="**/*_Test*.class"/>
        	<zipfileset dir="${meta.dir}" prefix="${meta.dir}"/>
        </jar>
    	<echo>"${jar.name}.jar" has been exported to "${atrium.jar.dir}/ </echo>
    </target>
	
	<!-- target: export.jar.private -->
    <target name="export.jar.private" if="private.present" depends="compile.classes">
        <jar destfile="${private.jar.dir}/${jar.name}.jar">
        	<zipfileset dir="${build.dir}/org" prefix="org/" excludes="**/*_Test*.class"/>
        	<zipfileset dir="${meta.dir}" prefix="${meta.dir}"/>
        </jar>
    	<echo>"${jar.name}.jar" has been exported to "${private.jar.dir}/ </echo>
    </target>
	
	<!-- target: export.jar -->
    <target name="export.jar" depends="export.jar.atrium, export.jar.private"/>
	
	<!-- target: all -->
    <target name="all" depends="clean,compile.suiteA,test.suiteA,
    	compile.suiteB,test.suiteB,compile.suiteC,test.suiteC,javadoc.classes,deploy"/>

</project>