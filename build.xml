<project name="jlayer" default="test.suiteC" basedir=".">
	
	<!-- java source code -->
	
	<property name="src.dir" value="src"/>
	
	<property name="src.classes.dir" value="${src.dir}/classes"/> 		<!-- SOURCE CLASSES -->
	
	<property name="src.units.dir" value="${src.dir}/units"/>     		<!-- UNIT CLASSES -->
	<property name="src.layers.dir" value="${src.dir}/layers"/>   		<!-- GENERATED CLASSES -->
	 
	<property name="src.tests.dir" value="${src.dir}/tests"/> 			<!-- TEST CLASSES -->
	<property name="src.suiteA.dir" value="${src.tests.dir}/suiteA"/>   <!-- TESTING BASICS -->
	<property name="src.suiteB.dir" value="${src.tests.dir}/suiteB"/>   <!-- TESTING LAYER GENERATION -->
	<property name="src.suiteC.dir" value="${src.tests.dir}/suiteC"/>   <!-- TESTING GENERATED LAYERS -->
	
	<!-- testng reports -->
	
	<property name="reports.dir" value="reports"/>
	<property name="reports.choice.dir" value="${reports.dir}/choice"/>
	<property name="reports.suiteA.dir" value="${reports.dir}/suiteA"/>
	<property name="reports.suiteB.dir" value="${reports.dir}/suiteB"/>
	<property name="reports.suiteC.dir" value="${reports.dir}/suiteC"/>
	
	<!-- javadoc -->
	
	<property name="javadoc.dir" value="javadoc"/>
	<property name="javadoc.classes.dir" value="${javadoc.dir}/classes"/>
	<property name="javadoc.tests.dir" value="${javadoc.dir}/tests"/>
	
	<!-- further properties -->
	
	<property name="lib.dir" value="lib"/>
	<property name="lib.classes.dir" value="${lib.dir}/classes"/>
	<property name="lib.tests.dir" value="${lib.dir}/tests"/>
	
	<property name="meta.dir" value="META-INF"/>
	<property name="build.dir" value="build"/>
	
	<property name="debug" value="on"/>
	
	<!-- Maven coordinates -->
	
	<property name="groupId" value="org.jlayer" />
	<property name="artifactId" value="jlayer" />
	<property name="version" value="1.0.0" />
	<!-- <property name="version" value="1.0-SNAPSHOT" /> -->
	
	<!-- directory for Maven upload -->
	
	<property name="dist.dir" value="dist"/>
	<property name="maven.dir" value="${dist.dir}/org/jlayer/jlayer/${version}"/>
	
	<!-- Maven artifacts' name, following the convention of Maven -->
	
	<property name="mpom" value="${artifactId}-${version}.pom" />
	<property name="mjar" value="${artifactId}-${version}.jar" />
	<property name="mjavadoc-jar" value="${artifactId}-${version}-javadoc.jar" />
	<property name="msources-jar" value="${artifactId}-${version}-sources.jar" />
	
	<!-- path definitions -->

	<path id="classpath">
		<pathelement location="${build.dir}"/>
		<fileset dir="${lib.classes.dir}">
    		<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="classpath.tests">
		<path refid="classpath"/>
		<fileset dir="${lib.tests.dir}">  
    		<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="testdirs">
		<dirset dir="${src.dir}">  
    		<include name="units"/>
			<include name="tests/suiteA"/>
			<include name="tests/suiteB"/>
			<include name="tests/suiteC"/>
		</dirset>
	</path>
	
	<!-- basic targets -->
	
	<!-- target: clean.layers -->
	<target name="clean.layers">
	        <delete includeemptydirs="true" quiet="true">
	        	<fileset dir="${src.layers.dir}" excludes="readme.txt" includes="**/*"/>
	        </delete>
	</target>
	
	<!-- target: clean -->
    <target name="clean" depends="clean.layers">
    	<delete dir="${build.dir}" quiet="true"/>
    	<delete dir="${reports.dir}" quiet="true"/>
    	<delete dir="${javadoc.dir}" quiet="true"/>
    	<delete file="${dist.dir}/${mjar}" quiet="true"/>
    	<delete dir="${dist.dir}/org" quiet="true"/>
    	<delete quiet="true">
    		<fileset dir="." includes="**/*~" defaultexcludes="false"/>
    	</delete>
    </target>
	
	<!-- target: init -->
    <target name="init">
    	<mkdir dir="${build.dir}"/>
    	<mkdir dir="${reports.dir}"/>
    	<mkdir dir="${javadoc.dir}"/>
    	<mkdir dir="${javadoc.classes.dir}"/>
    	<mkdir dir="${javadoc.tests.dir}"/>
    	<mkdir dir="${maven.dir}"/>
    </target>
	
	<!-- targets for compilation -->
	
	<!-- target: compile.classes -->
    <target name="compile.classes" depends="init">
        <javac debug="${debug}"
    		source="17"
    		classpathref="classpath"
    		srcdir="${src.classes.dir}"
        	excludes="**/init/*,**/process/*"
         	destdir="${build.dir}"
        	includeantruntime="false">
        	<!-- <compilerarg value="deprecation" /> -->
		</javac>
    </target>
	
	<!-- target: compile.units -->
		<target name="compile.units" depends="init,compile.classes">
			<javac debug="${debug}"
			    source="17"
			    classpathref="classpath"
			    srcdir="${src.units.dir}"
			    destdir="${build.dir}"
			    includeantruntime="false">
				<compilerarg line="-s src/layers -processor org.jlayer.impl.Processor"/>
			</javac>
		</target>
	
	<!-- target: compile.suiteA -->
	<target name="compile.suiteA" depends="init,compile.classes">
		<javac debug="${debug}"
		    source="17"
		    classpathref="classpath.tests"
		    srcdir="${src.suiteA.dir}"
		    destdir="${build.dir}"
		    includeantruntime="false"
		/>
	</target>
	
	<!-- target: compile.suiteB -->
	<target name="compile.suiteB" depends="init,compile.suiteA">
		<javac debug="${debug}"
		    source="17"
		    classpathref="classpath.tests"
		    srcdir="${src.suiteB.dir}"
		    destdir="${build.dir}"
		    includeantruntime="false"
		/>
	</target>
	
	<!-- target: compile.suiteC -->
	<target name="compile.suiteC" depends="init,compile.suiteB">
		<javac debug="${debug}"
		    source="17"
		    classpathref="classpath.tests"
			srcdir="${src.suiteC.dir}"
			destdir="${build.dir}"
		    includeantruntime="false"
		/>
	</target>
	
	<!-- targets for testing -->
	
	<!-- target: test.choice -->
	<target name="test.choice" depends="compile.classes, compile.suiteC">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.choice.dir}" 
	    	    groups="config,choice" excludedgroups = "ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: test.suiteA -->	<!-- TESTING BASICS -->
	<target name="test.suiteA" depends="clean.layers, compile.suiteA">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.suiteA.dir}" 
	    	    groups="suiteA" excludedgroups ="ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: test.suiteB -->	<!-- TESTING LAYER GENERATION -->
	<target name="test.suiteB" depends="test.suiteA, compile.suiteB">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.suiteB.dir}" 
	    	    groups="config, suiteB" excludedgroups ="ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: test.suiteC -->	<!-- TESTING GENERATED LAYERS -->
	<target name="test.suiteC" depends="test.suiteB, compile.suiteC">
		<taskdef resource="testngtasks" classpathref="classpath.tests"/>
	    <testng classpathref="classpath.tests" outputdir="${reports.suiteC.dir}" 
	    	    groups="suiteC" excludedgroups ="ignore,todo" haltonfailure="true">
	    	<classfileset dir="${build.dir}" includes="**/*Test.class"/>
	    </testng>
	</target>
	
	<!-- target: generate.jlayer.jar -->
	
	<target name="generate.jlayer.jar" depends="compile.classes">
		<!-- build the jlayer library -->
		<jar jarfile="${dist.dir}/${mjar}">
			<zipfileset dir="${build.dir}/org" prefix="org/" excludes="**/*_Test*.class"/>
		    <zipfileset dir="${meta.dir}" prefix="${meta.dir}"/>
		</jar>
	</target>
	
	<!-- javadoc targets -->
	
	<!-- target: generate.javadoc.classes -->
	<target name="generate.javadoc.classes" depends="compile.classes">
		<!-- build javadoc for classes -->
		<javadoc destdir="${javadoc.classes.dir}"
			packagenames="org.jlayer.*"
			additionalparam="-Xdoclint:none -quiet"
			sourcepath="${src.classes.dir}"
			defaultexcludes="yes"
			version="true"
			use="true"
			useexternalfile="true"
			access="private"
			overview="${src.classes.dir}/overview.html"
		    windowtitle="JLayer - Development System"
			doctitle="JLayer - Development System">
			<link href="https://docs.oracle.com/en/java/javase/17/docs/api"/>
		</javadoc>
	</target>
	
	<!-- target: generate.javadoc.tests -->
    <target name="generate.javadoc.tests" depends="test.suiteC">
    	<!-- build javadoc for test classes -->
		<javadoc packagenames="org.jlayer.*, default, basic.units, faulty.units, more.tests, sandbox"
				additionalparam="-Xdoclint:none -quiet"
				sourcepathref="testdirs"
				classpathref="classpath.tests"
				defaultexcludes="yes"
				destdir="${javadoc.tests.dir}"
				version="true"
				use="true"
				useexternalfile="true"
				access="private"
				overview="${src.tests.dir}/overview.html"
			    windowtitle="JLayer - Building and Testing"
				doctitle="JLayer - Building and Testing">
			    <link href="https://docs.oracle.com/en/java/javase/17/docs/api"/>
		</javadoc>
    </target>
	
	<!-- MEMO additionalparam="-Xdoclint:none -quiet" -->
	<!-- ... suppresses        -warnings      -output -->
		
	<!-- target: generate.maven.artifacts -->
	
	<target name="generate.maven.artifacts" depends="generate.jlayer.jar, generate.javadoc.classes">
		<!-- provide the POM file -->
		<copy file="${dist.dir}/pom.xml" tofile="${maven.dir}/${mpom}" />
		<replace file="${maven.dir}/${mpom}" token="4711" value="${version}" />
		<!-- provide the main artifact -->
		<copy file="${dist.dir}/${mjar}" tofile="${maven.dir}/${mjar}" />
		<!-- build the sources jar -->
	    <jar jarfile="${maven.dir}/${msources-jar}">
	        <fileset dir="${src.classes.dir}">
	        	<exclude name="overview.html"/>
	    	</fileset>
	    </jar>
		<!-- provide the javadoc jar -->
		<jar jarfile="${maven.dir}/${mjavadoc-jar}">
			<fileset dir="${javadoc.classes.dir}" />
		</jar>
		<!-- provide the checksums -->
		<checksum file="${maven.dir}/${mpom}" algorithm="md5" />
		<checksum file="${maven.dir}/${mpom}" algorithm="sha1" />
		<checksum file="${maven.dir}/${mjar}" algorithm="md5" />
		<checksum file="${maven.dir}/${mjar}" algorithm="sha1" />
		<checksum file="${maven.dir}/${msources-jar}" algorithm="md5" />
		<checksum file="${maven.dir}/${msources-jar}" algorithm="sha1" />
		<checksum file="${maven.dir}/${mjavadoc-jar}" algorithm="md5" />
		<checksum file="${maven.dir}/${mjavadoc-jar}" algorithm="sha1" />
		<!-- provide signed files and final zip-file -->
		<echo>PROVIDE SIGNED FILES AND ZIP-FILE</echo>
		<echo>> gpg2 -ab *.jar</echo>
		<echo>> gpg2 -ab *.pom</echo>
		<echo>> zip -r jlayer.zip org</echo>
	</target>
	
	<!-- target: all -->
	
    <target name="all" depends="clean,compile.suiteA,test.suiteA,
    	compile.suiteB,test.suiteB,compile.suiteC,test.suiteC"/>

</project>